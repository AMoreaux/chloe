app.AddClientView = Backbone.View.extend({
    template: 'addclient',
    initialize: function(){
        var that = this;
        app.tools.closeView(this);
        app.tools.checkAuth(function(){
            that.model = new app.AddClientModel;
            that.token = app.userProModel.attributes.token;
            that.model.fetchDataCreation(that.token, function(dataCreation){
                that.dataCreation = dataCreation;
                that.render({dataCreation : dataCreation, constructForms : that.model.toJSON()});

                setTimeout(function(){
                  Dropzone.autoDiscover = false;
                   var myDropzone = new Dropzone("#form-pro-add", { paramName: 'picture', 
                      uploadMultiple: false });

                    $('#form-pro-add').removeClass('dz-clickable');
                    $('.dz-default span').empty();
                    $('.dz-default').prependTo('.filesZone');
                    $('.filesZone p').prependTo('.dz-default');
                    $('.filesZone .ion-upload').prependTo('.dz-default');
                    myDropzone.on("addedfile", function(file) {
                      $('.dz-preview').prependTo('.filesZone');
                      $('.dz-hidden-input').prependTo('.filesZone');
                      $('.dz-hidden-input').attr('name', 'picture');
                      $('.dz-error-mark').remove();
                      $('.dz-success-mark').remove();
                      $('.dz-size').remove();
                      $('.dz-filename').remove();
                      $('.filesZone .ion-upload').remove();
                      $('.filesZone p').remove();
                      });
                 }, 1000);
            })
        });
    },
    events: {
        'submit .form-pro-add' : 'sendAddForm',
        'drop body':'dropZone'
    },
    render: function(params){
        app.tools.renderTemplate(this, params, false);
        $('nav a').removeClass('selected-nav');
        $('nav a[href="#add-client"]').addClass('selected-nav');
        return this;
    },
    dropZone:function(e){
      e.preventDefault();
    },
    sendAddForm: function(e){
      e.preventDefault();
      var that = this;
      var dataFetchForm = app.tools.fetchDataForm('form-pro-add');
      var dataForm = dataFetchForm['formData'];

      this.model.sendForm(dataForm, 'createUserClient', this.token, function(data){
          if(data.state == 'error'){
            that.render({dataCreation : that.dataCreation, constructForms: that.model.attributes, dataFormAdd: dataFetchForm['list'], errorsAdd: app.tools.getErrorMessage(data.data)});
            toastr.error('Veuillez vérifier les informations.', 'Erreur !');
            $('[data-toggle="tooltip"]').tooltip();
          } 
          else{
            that.render({dataCreation : that.dataCreation, constructForms: that.model.attributes});
            toastr.success('Votre client va recevoir un e-mail.', 'Client enregistré !');
          } 
        });
    }
});
app.AuthView = Backbone.View.extend({
    template: 'auth',
    initialize: function(){
      app.tools.closeView(this);
      this.model = new app.HomeModel;
      this.render({constructForms : this.model.toJSON()});
    },
    events: {
        'submit .form-pro-connect' : 'sendConnectForm',
    },
    render: function(params){
        app.tools.renderTemplate(this, params, true);
        return this;
    },
    sendConnectForm: function(e){
        e.preventDefault();
        var that = this;
        var dataFetchForm = app.tools.fetchDataForm('form-pro-connect');
        var dataForm = dataFetchForm['formData'];

        app.tools.sendForm(dataForm, 'login', function(data){
          if(data.state == 'error'){
            that.render({constructForms: that.model.attributes, dataFormAuth: dataFetchForm['list'], errorsAuth: app.tools.getErrorMessage(data.data)});
            toastr.error('Mauvais identifiants.', 'Erreur !');
          } 
          else{
            document.cookie="tokenChloeApp="+data.token;
            if(data.account_type == 'pro'){
              app.userProModel = new app.UserProModel({'token':data.token, 'id':data.id});
              app.userProModel.fetchDataUserPro(data.token,function(dataUser){
                app.userProModel.set(dataUser);
                appRouter.navigate('pro', {trigger: true});
              });
            }
            else{
              app.userClientModel = new app.UserClientModel({'token':data.token, 'id':data.id});
              app.userClientModel.fetchDataUserClient(data.token,function(dataUser){
                app.userClientModel.set(dataUser);
                appRouter.navigate('client', {trigger: true});
              });
            }
          }
        });
    }
});
app.ChartView = Backbone.View.extend({
    template: 'singleclient',
    initialize: function(options){
        app.tools.closeView(this);
        this.first = true;
        this.options = options;
        this.model = new app.ChartModel;
    },

    render: function(type, time){
        var that = this;
        var token = app.tools.getCookie('tokenChloeApp');
        if(that.first == true){
            this.model.getData(token, time, that.options.id.idClient, function(data){
                that.choiceTypeGraph(data, type);
                that.first = false;
            });
        }else{
            this.model.getDataGraph(token, time, that.options.id.idClient, function(data){
                that.choiceTypeGraph(data, type);
            });
        }
        return this;
    },

    choiceTypeGraph: function(data, type){
        var that = this;
        var dataClient = data.data;
        if(document.getElementById('myChart')!= undefined)document.getElementById('myChart').remove();
        var canvas = document.createElement('canvas');
        canvas.width  = 960;
        canvas.height = 411;
        canvas.id = 'myChart';
        document.getElementById('blocChart').appendChild(canvas);
        var ctx = $('#myChart').get(0).getContext("2d");
        that.chart = new Chart(ctx);
        if(type == 'ph')that.createGraphPh(dataClient, function(response){
            $('#nameData').html('PH de l\'eau');
            return that.chart.Line(response['data'], response['options']);
        });
        if(type == 'chlore')that.createGraphChlore(dataClient, function(response){
            $('#nameData').html('Niveau de chlore');
            return that.chart.Line(response['data'], response['options']);
        });
        if(type == 'temperature')that.createGraphTemperature(dataClient, function(response){
            $('#nameData').html('Température de l\'eau');
            return that.chart.Line(response['data'], response['options']);
        });
    },

    createGraphPh:function(dataClient, callback){
        var type = dataClient.ownPh;
        this.date(dataClient, type, function(req){
            var data = {
                labels: req['dates'],
                datasets: [
                    {
                        label: "ph",
                        fillColor: "rgba(229,105,92,0.1)",
                        strokeColor: "rgba(229,105,92,1)",
                        pointColor: "#fff",
                        pointStrokeColor: "rgba(229,105,92,1)",
                        pointHighlightFill: "rgba(229,105,92,1)",
                        pointHighlightStroke: "rgba(229,105,92,1)",
                        data: req['values']
                    }
                ]
            };
            var options = {
                responsive: true,
                scaleOverride: true,
                scaleShowLabels: true,
                scaleStepWidth: 0.2,
                scaleSteps: 10,
                scaleStartValue: 6,
                scaleFontColor: "#AEB6C1",
                scaleFontFamily: "'Source Sans Pro'",
                scaleFontSize: 14,
                animationEasing:"linear",
                animationSteps: 20,
                animation: false,
                scaleFontStyle: "normal",
                pointDotRadius : 6,
                pointDotStrokeWidth : 2,
                pointHitDetectionRadius : 3,
                bezierCurve : false,
                scaleLabel: "<%=value%>",
                showTooltips: true,
                tooltipTemplate: "<%= value %>"

            };
            var response = [];
            response['data'] = data;
            response['options'] = options;
            callback.call(this,response);

        })
    },

    createGraphTemperature: function(dataClient, callback){
        var type = dataClient.ownTemperature;
        this.date(dataClient, type, function(req) {
            var data = {
                labels: req['dates'],
                datasets: [
                    {
                        label: "temperature",
                        fillColor: "rgba(229,105,92,0.1)",
                        strokeColor: "rgba(229,105,92,1)",
                        pointColor: "#fff",
                        pointStrokeColor: "rgba(229,105,92,1)",
                        pointHighlightFill: "rgba(229,105,92,1)",
                        pointHighlightStroke: "rgba(229,105,92,1)",
                        data: req['values']
                    }
                ]
            };
            var options = {
                responsive: true,
                scaleOverride: true,
                scaleShowLabels: true,
                scaleFontColor: "#AEB6C1",
                scaleFontFamily: "'Source Sans Pro'",
                scaleFontSize: 14,
                scaleFontStyle: "normal",
                scaleStepWidth: 5,
                scaleSteps: 7,
                animation: false,
                animationEasing:"linear",
                animationSteps: 20,
                scaleStartValue: 0,
                pointHitDetectionRadius : 3,
                pointDotRadius : 6,
                pointDotStrokeWidth : 3,
                bezierCurve : false,
                scaleLabel: "<%=value%>C°",
                showTooltips: true,
                tooltipTemplate: "<%= value %>C°"
            };
            var response = [];
            response['data'] = data;
            response['options'] = options;
            callback.call(this,response);
        })
    },

    createGraphChlore:function(dataClient, callback){
        var type = dataClient.ownChlore;
        this.date(dataClient, type, function(req) {
            var data = {
                labels: req['dates'],
                datasets: [
                    {
                        label: 'chlore',
                        fillColor: "rgba(229,105,92,0.1)",
                        strokeColor: "rgba(229,105,92,1)",
                        pointColor: "#fff",
                        pointStrokeColor: "rgba(229,105,92,1)",
                        pointHighlightFill: "rgba(229,105,92,1)",
                        pointHighlightStroke: "rgba(229,105,92,1)",
                        data: req['values']
                    }]
            };
            var options = {
                responsive: true,
                scaleOverride: true,
                scaleShowLabels: true,
                scaleStepWidth: 0.2,
                scaleSteps: 10,
                scaleStartValue: 1,
                pointDotRadius : 6,
                scaleFontColor: "#AEB6C1",
                scaleFontFamily: "'Source Sans Pro'",
                scaleFontSize: 14,
                scaleFontStyle: "normal",
                pointDotStrokeWidth : 2,
                animationEasing:"linear",
                animationSteps: 20,
                animation: false,
                pointHitDetectionRadius : 3,
                bezierCurve: false,
                scaleLabel: "<%=value%> mg/l",
                showTooltips: true,
                tooltipTemplate: "<%= value %> mg/l"
            };
            var response = [];
            response['data'] = data;
            response['options'] = options;
            callback.call(this, response);

        })
    },




    date:function(dataClient, type, callback){
        var dates = [];
        var values = [];
        if(type.length > 43){
            this.sanitizeYear(dataClient,type, function(req){
                callback.call(this,req);
            });
        }else{
            for(var i = 0; i < type.length; i++){
                var dateItem = new Date(type[i].date*1000);
                var dateMonth = dateItem.getMonth()+1;
                if(dateMonth.toString().length == 1)dateMonth = "0"+dateMonth;
                var dateDay = dateItem.getDate();
                if(dateDay.toString().length == 1)dateDay = "0"+dateDay;
                var date = dateDay+'/'+dateMonth;
                dates.push(date);
                values.push(type[i].value);
            }
            var req = [];
            req['dates'] = dates;
            req['values'] = values;
            callback.call(this,req);
        }
    },

    sanitizeYear: function(dataClient,type, callback){
        var list = [];
        var dates = [];
        var values = [];
        var req = [];
        var json = this.model.attributes.month;
        for(var i = 0; i < type.length; i++) {
            var dateItem = new Date(type[i].date * 1000);
            var item = {
                value :type[i].value,
                month: dateItem.getMonth()+1
            };
            list.push(item);
        }
        var listMonth = [];
        for(var p = 0; p < list.length; p++){
            listMonth.push(list[p].month);
        }
        var listMonthUnique = listMonth.filter(function(itm,i,listMonth){
            return i==listMonth.indexOf(itm);
        });
        var t = 0;
        for(var n = 0; n < listMonthUnique.length-1; n++){
            var monthToTri = listMonthUnique[t];
            var itemForTri = [];
            for(var j = 0; j < list.length; j++){
                if(monthToTri == list[j].month){
                    itemForTri.push(list[j]);
                }
            }
            var valueMoy = 0;
            for(var k = 0; k < itemForTri.length; k++){
                valueMoy += parseInt(itemForTri[k].value);
            }
            valueMoy = valueMoy/itemForTri.length;
            for (var key in json) {
                if (key == monthToTri){
                    dates.push(json[key]);
                }
            }
            values.push(Math.round(valueMoy*100)/100);
            t++;
        }
        req['dates'] = dates;
        req['values'] = values;
        callback.call(this,req);
    }
});

app.ClientsView = Backbone.View.extend({
    template: 'clients',
    initialize: function(){
        app.tools.closeView(this);
        var that = this;
        that.type = "name";
        that.MapBoxModel = new app.MapBoxModel();
        app.tools.checkAuth(function(){
            that.render();
        });
    },
    events: {
        "click .choice-filter": "changeTri",
        "click .card-result-link-container":"displayClient"
    },
    render: function(){
        var that = this;
        var token = app.userProModel.attributes.token;
        that.MapBoxModel.getClientsDataWithLoader(token, function(data){
            that.clients = data;
            app.tools.renderTemplate(that, null, false, function(){
                    that.displayByName();
                    $('nav a').removeClass('selected-nav');
                    $('nav a[href="#clients"]').addClass('selected-nav');
            });
        });

        return this;
    },


    changeTri: function(e){
        var type = $(e.currentTarget).data("id");
        if(type == 'name')this.displayByName();
        else this.displayByCity();
        $('.choice-filter').removeClass('filtre-selected');
        $('.choice-filter[data-id="'+type+'"]').addClass('filtre-selected');

    },
    displayClient:function(e){
        app.tools.displayClient(e);
    },
    displayByName:function(){
        var that = this;
        function sortByFirstname(key1, key2){
            return key1.firstname > key2.firstname;
        }
        that.clients.sort(sortByFirstname);
        var output =  '';
        for(var i = 0; i < that.clients.length; i++ ){
            if(that.clients[i].picture){
                var img = "style=\"background-image: url('"+urlApi+"userclient/load/"+that.clients[i].id+"/"+app.userProModel.attributes.token+"');\"";
            }else{
                //prod : var img = "style=\"background-image: url('../assets/img/default.jpg');\"";
                //devAntoine : var img = "style=\"background-image: url('../app/assets/img/default.jpg');\"";
                var img = "style=\"background-image: url('../assets/img/default.jpg');\"";
            }
            var name = that.clients[i].firstname+' '+that.clients[i].lastname;
            output += '<div class="col-md-4 card-pool">';
            output += '<div class="card-result-filtre"'+img+'>';
            output += '<div class="card-result-link-container" data-id="'+that.clients[i].id+'">';
            output += '<a href="#" data-id="'+that.clients[i].id+'" class="card-result-button button">Voir la fiche</a>';
            output += '</div>';
            output += "</div>";
            output += '<div class="card-result-name">';
            output += '<p>' + that.clients[i].firstname+' '+ that.clients[i].lastname +'</p>';
            output += '<small>' + that.clients[i].ownSwimmingpool[0].water_volume+'m³</small>';
            output += '</div>';
            output += '</div>';
            output += '</div>';
            output += '</div>';
        }
        output += '</div>';
        $('#resultsList').html(output);
    },


    displayByCity: function(){
        function sortByVille(key1, key2){
            return key1.ownUser[0].city > key2.ownUser[0].city;
        }
        this.clients.sort(sortByVille);
        var listVilles = [];
        var listClientByVille = [];
        for(var r = 0; r < this.clients.length; r++){
            listClientByVille.push(this.clients[r].ownUser[0].city);
        }
        var listClientByVilleUnique = listClientByVille.filter(function(itm,i,listClientByVille){
            return i==listClientByVille.indexOf(itm);
        });
        for(var k = 0; k < listClientByVilleUnique.length; k++){
            listVilles[listClientByVilleUnique[k]] = [];
        }

        for(ville in listVilles){
            var calc = 0;
            for(var i = 0; i < this.clients.length; i++){
                if(ville == this.clients[i].ownUser[0].city){
                    listVilles[ville][calc] = (this.clients[i]);
                    calc++;
                }
            }
        }
        var output =  '';
        for(var ville in listVilles){
            var numberObject = 0;
            for (var item in listVilles[ville]) {
                    numberObject += 1;
            }
            output += '<h3 style="clear : both;">'+ville+'</h3>';
            for(var l =0; l < numberObject; l++){
                if(listVilles[ville][l].picture){
                    var img = "style=\"background-image: url('"+urlApi+"userclient/load/"+listVilles[ville][l].id+"/"+app.userProModel.attributes.token+"');\"";
                }else{
                    //prod : var img = "style=\"background-image: url('../assets/img/default.jpg');\"";
                    //devAntoine : var img = "style=\"background-image: url('../app/assets/img/default.jpg');\"";
                    var img = "style=\"background-image: url('../assets/img/default.jpg');\"";
                }
                var name = listVilles[ville][l].firstname+' '+listVilles[ville][l].lastname;
                output += '<div class="col-md-4 card-pool">';
                output += '<div class="card-result-filtre"'+img+'>';
                output += '<div class="card-result-link-container" data-id="'+listVilles[ville][l].id+'">';
                output += '<a href="#" data-id="'+listVilles[ville][l].id+'" class="card-result-button button">Voir la fiche</a>';
                output += '</div>';
                output += "</div>";
                output += '<div class="card-result-name">';
                output += '<p>' + listVilles[ville][l].firstname+' '+ listVilles[ville][l].lastname +'</p>';
                output += '<small>' + listVilles[ville][l].ownSwimmingpool[0].water_volume+'m³</small>';
                output += '</div>';
                output += '</div>';
                output += '</div>';
                output += '</div>';
            }
            output += '</div></div>';
        }
        $('#resultsList').html(output);
    }
});
app.HomeView = Backbone.View.extend({
    template: 'home',
    initialize: function(){
      app.tools.closeView(this);
      this.model = new app.HomeModel;
      this.render({constructForms : this.model.toJSON()});
    },
    events: {
        'submit .form-pro-connect' : 'sendConnectForm',
        'submit .form-pro-register' : 'sendRegisterForm'
    },
    render: function(params){
        app.tools.renderTemplate(this, params, true);
        return this;
    },
    sendConnectForm: function(e){
        e.preventDefault();
        var that = this;
        var dataFetchForm = app.tools.fetchDataForm('form-pro-connect');
        var dataForm = dataFetchForm['formData'];

        app.tools.sendForm(dataForm, 'login', function(data){
          if(data.state == 'error'){
            that.render({constructForms: that.model.attributes, dataFormAuth: dataFetchForm['list'], errorsAuth: app.tools.getErrorMessage(data.data)});
            toastr.error('Mauvais identifiants.', 'Erreur !');
          } 
          else{
            app.userProModel = new app.UserProModel({'token':data.token});
            document.cookie="tokenChloeApp="+data.token;
            app.userProModel.fetchDataUserPro(data.token,function(dataUser){
              app.userProModel.set(dataUser);
              appRouter.navigate('pro', {trigger: true});
            });
          }
        });
    },
    sendRegisterForm: function(e){
      e.preventDefault();
      var that = this;
      var dataFetchForm = app.tools.fetchDataForm('form-pro-register');
      var dataForm = dataFetchForm['formData'];

      app.tools.sendForm(dataForm, 'createUser', function(data){
          if(data.state == 'error'){
            that.render({constructForms: that.model.attributes, dataFormRegister: dataFetchForm['list'], errorsRegister: app.tools.getErrorMessage(data.data)});
            toastr.error('Veuillez vérifier vos informations.', 'Erreur !');
            $('[data-toggle="tooltip"]').tooltip();
          } 
          else{
            that.render({constructForms: that.model.attributes});
            toastr.success('Veuillez vérifier vos e-mails.', 'Inscription réussie !');
          } 
        });
    }
});
app.MailView = Backbone.View.extend({
    template: 'mail',
    initialize: function(options){
        var that = this;
        that.options = options;
        app.tools.checkAuth(function(){
            that.model = new app.MailModel;
            that.render();
        });
    },
    events: {
        'click .mail-pop-in span':'displayMail',
        'click .mail-button' : 'sendMailForm',
        'click .close-mail':'hideMail'
    },
    render: function(formParams, reload){
        if(reload == undefined) var reload = false;
        if(reload == false) app.tools.closeView(this);
        var that = this;
        that.formParams = formParams;
        this.token = app.userProModel.attributes.token;
        if(that.options.client.data){
            var clients = [that.options.client.data];
            if(that.formParams == undefined){
                that.formParams = {constructForms : that.model.toJSON(), clients: clients};
                that.formParams.constructForms.formMail.idUserClient.name = "none";
            }
        else{
                that.formParams.clients = clients;
                that.formParams.reload = true;
            }
            that.renderView(reload);
        }else{
            this.model.getClientsData(that.token, function (clients){
                if(that.formParams == undefined) that.formParams = {constructForms : that.model.toJSON(), clients: clients};
                else{
                    that.formParams.clients = clients;
                    that.formParams.reload = true;
                }
                that.renderView(reload);
            });
        }

        return this;
    },

    renderView: function(reload){
        var that = this;
        app.tools.renderTemplate(that, that.formParams, true, function(){
            if(reload == false){
                setTimeout(function(){
                    document.querySelector('.page-mail').classList.add('page-mail-open');
                    that.formParams.constructForms.formMail.idUserClient.name = "Nom du client";
                }, 100);
            }
            document.querySelector('.close-mail').addEventListener("click", function(){that.hideMail()});
            document.querySelector('.send-mail').addEventListener("click", function(e){that.sendMailForm(e)});
        });
    },

    displayMail:function(e){
        app.navView.displayMail(e);
    },

    hideMail:function(){
        var pageMail = document.querySelector('.page-mail');
        if(pageMail != null){
            pageMail.classList.remove('page-mail-open');
            pageMail.classList.add('page-mail-close');
            setTimeout(function(){
                document.getElementById('search-mail').innerHTML = null;
            }, 200);
        }
    },
    sendMailForm: function(e){
      e.preventDefault();
      var that = this;
      var dataFetchForm = app.tools.fetchDataForm('form-pro-mail');
      var dataForm = dataFetchForm['formData'];

      app.tools.sendForm(dataForm, 'mailClient/'+this.token, function(data){
          if(data.state == 'error'){
            that.render({constructForms: that.model.attributes, dataFormMail: dataFetchForm['list'], errorsMail: app.tools.getErrorMessage(data.data)}, true);
            toastr.error('Veuillez vérifier vos informations.', 'Erreur !');
            $('[data-toggle="tooltip"]').tooltip();
          } 
          else{
            that.render({constructForms: that.model.attributes}, true);
            toastr.success('Votre client va recevoir l\'e-mail', 'Mail envoyé !');
          } 
        });
    }

});
app.NavView = Backbone.View.extend({
    template: 'nav',
    initialize: function(){
      app.tools.closeView(this);
      this.render();
      $('.close-mail').click(function(event) {
          var pageMail = document.querySelector('.page-mail');
          pageMail.classList.remove('page-mail-open');
        });
    },
    events: {
        'click .button-search' : 'displaySearch',
        'click .display-drop-down' : 'toggleDisplay',
        'click .button-mail' : 'displayMail',
        'mouseleave .menu-user-drop-down' : 'hideDropDown'
    },
    render: function(){
        app.tools.renderTemplate(this, {urlLogo: urlApi+'userpro/load/logo/'+app.userProModel.attributes.token, dataUser: app.userProModel.toJSON()}, true);
        return this;
    },
    toggleDisplay: function(e){
      e.preventDefault();
      var page = $('.'+$(e.currentTarget).data('target'));
      page.css('display', page.css('display') === 'block' ? 'none' : 'block');
    },
    hideDropDown:function(){
      $('.menu-user-drop-down').css('display', 'none');
    },
    displaySearch:function(e){
      e.preventDefault();
      var pageSearch = document.querySelector('.page-search');
      if(pageSearch != null){
        pageSearch.classList.remove('page-search-open');
        setTimeout(function(){
          document.getElementById('search-mail').innerHTML = null;
        }, 200);
      }
      else{
        app.searchView = new app.SearchView({el : $('#search-mail')});
      }
    },
    displayMail:function(e, client){
        if(client == undefined)client = "";
        if (e != false) e.preventDefault();
        if(document.querySelector('.page-search') != null) document.querySelector('.page-search').classList.remove('page-search-open');
          app.mailView = new app.MailView({el : $('#search-mail'), client:client});
    }
});
app.RegisterView = Backbone.View.extend({
    template: 'register',
    initialize: function(){
      app.tools.closeView(this);
      this.model = new app.HomeModel;
      this.render({constructForms : this.model.toJSON()});

      setTimeout(function(){
        Dropzone.autoDiscover = false;
         var myDropzone = new Dropzone("#form-pro-register", { paramName: 'logo', 
            uploadMultiple: false });

          $('#form-pro-register').removeClass('dz-clickable');
          $('.dz-default span').empty();
          $('.dz-default').prependTo('.filesZone');
          $('.filesZone p').prependTo('.dz-default');
          $('.filesZone .ion-upload').prependTo('.dz-default');
          myDropzone.on("addedfile", function(file) {
            $('.dz-preview').prependTo('.filesZone');
            $('.dz-hidden-input').prependTo('.filesZone');
            $('.dz-hidden-input').attr('name', 'logo');
            $('.dz-error-mark').remove();
            $('.dz-success-mark').remove();
            $('.dz-size').remove();
            $('.dz-filename').remove();
            $('.filesZone .ion-upload').remove();
            $('.filesZone p').remove();
            });
       }, 1000);
    },
    events: {
        'submit .form-pro-register' : 'sendRegisterForm'
    },
    render: function(params){
        app.tools.renderTemplate(this, params, true);
        return this;
    },
    sendRegisterForm: function(e){
      e.preventDefault();
      var that = this;
      var dataFetchForm = app.tools.fetchDataForm('form-pro-register');
      var dataForm = dataFetchForm['formData'];

      app.tools.sendForm(dataForm, 'createUser', function(data){
          if(data.state == 'error'){
            that.render({constructForms: that.model.attributes, dataFormRegister: dataFetchForm['list'], errorsRegister: app.tools.getErrorMessage(data.data)});
            toastr.error('Veuillez vérifier vos informations.', 'Erreur !');
            $('[data-toggle="tooltip"]').tooltip();
          } 
          else{
            that.render({constructForms: that.model.attributes});
            toastr.success('Veuillez vérifier vos e-mails.', 'Inscription réussie !');
          } 
        });
    }
});
app.SearchView = Backbone.View.extend({
    template: 'search',
    initialize: function(){
        app.tools.closeView(this);
        var that = this;
        that.MapBoxModel = new app.MapBoxModel;
        that.clients = "";
        app.tools.checkAuth(function(){
            that.render();
            setTimeout(function(){
                $('#searchForm').focus();
            }, 300);
        });
    },
    events: {
        "keyup #searchForm": "search",
        "document load":"focusForm",
        "click .card-result-link-container":"displayClient"
    },
    render: function(){
        var that = this;
        var token = app.userProModel.attributes.token;
        that.MapBoxModel.getClientsData(token, function(data){
            that.clients = data;
        });
        app.tools.renderTemplate(this, null, true);
        setTimeout(function(){
          document.querySelector('.page-search').classList.add('page-search-open');
        }, 200);
        return this;
    },
    displayClient:function(e){
        app.tools.displayClient(e);
    },
    search:function(){
        var that = this;
        var value = document.getElementById('searchForm').value.toLowerCase();
        var count = 0;
        var output = '';
        if(value.length >= 2){
            for(var i = 0; i < that.clients.length; i++ ){
                if(that.clients[i].picture){
                    var img = "style=\"background-image: url('"+urlApi+"userclient/load/"+that.clients[i].id+"/"+app.userProModel.attributes.token+"');\"";
                }else{
                    //prod : var img = "style=\"background-image: url('../assets/img/default.jpg');\"";
                    //devAntoine : var img = "style=\"background-image: url('../app/assets/img/default.jpg');\"";
                    var img = "style=\"background-image: url('../assets/img/default.jpg');\"";
                }
                var name = that.clients[i].firstname+' '+that.clients[i].lastname;
                if ((that.clients[i].firstname.toLowerCase().search(value) != -1) ||
                    (that.clients[i].lastname.toLowerCase().search(value) != -1) || 
                    (that.clients[i].ownUser[0].city.toLowerCase().search(value) != -1) ||
                    name.toLowerCase().search(value) != -1) {
                    output += '<div class="col-md-4 card-pool">';
                    output += '<div class="card-result-filtre"'+img+'>';
                    output += '<div href="#" data-id="'+that.clients[i].id+'" class="card-result-link-container">';
                    output += '<a href="#" data-id="'+that.clients[i].id+'" class="card-result-button button">Voir la fiche</a>';
                    output += '</div>';
                    output += "</div>";
                    output += '<div class="card-result-name">';
                    output += '<p>' + that.clients[i].firstname+' '+ that.clients[i].lastname +'</p>';
                    output += '<small>' + that.clients[i].ownSwimmingpool[0].water_volume+'m³</small>';
                    output += '</div>';
                    count++;
                }
                output += '</div>';
                $('#results').html(output);
                $('#poolNumber').html(count);
            }
        }else{
            $('#results').empty();
            count = 0;
            $('#poolNumber').html(count);
        }
        if(count < 2){
            $('.plural').empty();
        }else{
            $('.plural').html('s');
        }
    }
});
app.SettingsView = Backbone.View.extend({
    template: 'settings',
    initialize: function(){
        app.tools.closeView(this);
        var that = this;
        app.tools.checkAuth(function(){
            that.model = new app.SettingsModel; 
            that.render({constructForms : that.model.toJSON()});
        });
    },
    events: {
        'click .btn-settings-password':'sendPasswordForm'
    },
    sendPasswordForm: function(e){
      e.preventDefault();
      var that = this;
      var dataFetchForm = app.tools.fetchDataForm('form-password-settings');
      var dataForm = dataFetchForm['formData'];
      var token = app.tools.getCookie('tokenChloeApp');

      app.tools.sendForm(dataForm, 'updatePassword/'+token, function(data){
          if(data.state == 'error'){
            that.render({constructForms: that.model.attributes, dataFormPassword: dataFetchForm['list'], errorsPassword: app.tools.getErrorMessage(data.data)});
            toastr.error('Veuillez vérifier vos informations.', 'Erreur !');
            $('[data-toggle="tooltip"]').tooltip();
          } 
          else{
            that.render({constructForms: that.model.attributes});
            toastr.success('Votre mot de passe a correctement été changé.', 'Modification effectuée !');
          } 
        });
    },
    render: function(params){
        app.tools.renderTemplate(this, params, false);
        return this;
    }
});
app.SingleClientView = Backbone.View.extend({
    initialize: function(){
        app.tools.closeView(this);
        this.MapBoxModel = new app.MapBoxModel;
        this.ChartModel = new app.ChartModel;
        this.time = '30';
        this.type = 'chlore';
    },

    flip: function (e) {
        var jThis = $('.'+$(e.currentTarget).data('target'));
        var flipper = jThis.children(".flipper");
        var widthFront = flipper.children(".front").width();
        var widthBack = flipper.children(".back").width();
        var width = jThis.hasClass("flip") ? widthFront : widthBack;

        flipper.width(width);

        jThis.toggleClass("flip");

        return this;
    },

    createGraphByTime: function(e, ChartView){
        var time = $(e.currentTarget).data("id");
        this.time = time;
        $('.filtre-selected').toggleClass( "filtre-selected", "remove" );
        $('#'+time).addClass('filtre-selected');
        return ChartView.render(this.type, this.time);
    },

    createGraphByType: function(e, ChartView){
        var type = $(e.currentTarget).data("type");
        this.type = type;
        $('.graphType').removeClass('card-selected');
        $('.graphType[data-type="'+type+'"]').addClass('card-selected');
        return ChartView.render(this.type, this.time);
    },
    getWeather: function(lng, lat){
        var that = this;
        this.MapBoxModel.getWeather( lng, lat, function(data){
            var json = that.ChartModel.attributes.weather;
            var temp = Math.round(data.list[0].main.temp);
            var icon = data.list[0].weather[0].icon;
            for (var key in json) {
                if (json.hasOwnProperty(key) && key == icon){
                    $('#iconWeather').addClass(json[key].class)
                }
            }
            $('#weather').html(temp+'°');
        });
    }

});


app.SingleClientProView = Backbone.View.extend({

    template: 'singleclient',
    initialize: function(options){
        NProgress.start();
        app.tools.closeView(this);
        var that = this;
        that.options = options;
        that.ChartView = new app.ChartView({id:that.options});
        that.singleClientView = new app.SingleClientView();
        that.MapBoxModel = new app.MapBoxModel;
        that.ChartModel = new app.ChartModel();
        that.ModelUserPro = new app.UserProModel();
        that.time = "30";
        that.type = "chlore";
        that.dataClient = "";
        app.tools.checkAuth(function(){
            that.render();
        });
    },
    events: {
        "click .graphTime": "createGraphByTime",
        "click .graphType": "createGraphByType",
        "click .close-single-client":"closeSingleClient",
        "click .flip-card": "flip",
        "click .send":"displayMail"
    },
    createGraphByTime:function(e){
        var time = $(e.currentTarget).data("id");
        this.time = time;
        this.singleClientView.createGraphByTime(e, this.ChartView);
    },
    createGraphByType:function(e){
        var type = $(e.currentTarget).data("type");
        this.type = type;
        this.singleClientView.createGraphByType(e, this.ChartView);
    },
    render: function(){
        var that = this;
        var token = app.userProModel.attributes.token;
        NProgress.set(0.1);

        L.mapbox.accessToken = 'pk.eyJ1IjoiYW50b2luZW1vcmVhdXgiLCJhIjoiTVpscTdxUSJ9.OjBul8yiveD6Xx3tYK9acg';
        that.ChartModel.getData(token, that.time,that.options.idClient, function(dataClient){
            that.dataClient = dataClient;
            app.tools.renderTemplate(that, {data:that.dataClient.data}, true);
            that.MapBoxModel.getClientsData(token, function (clients) {
                NProgress.set(0.3);
                that.MapBoxModel.getProData(token, function (pro) {
                    NProgress.set(0.5);
                    that.ChartView.render("chlore", 30);
                    var reg = /[ ]/g;
                    var clientAddr = dataClient.data.ownUser[0];
                    var camera = clientAddr.address.replace(reg, '+') + ',' + clientAddr.code_postal + '+' + clientAddr.city + '+France';
                    that.MapBoxModel.getLocateClient(camera, function (dataPro) {
                        NProgress.set(0.7);
                        var map = L.mapbox.map('map', 'mapbox.streets', {
                            zoomControl: true,
                            scrollWheelZoom: false

                        });
                        that.marker(map, clients, reg, function () {
                        map.setView([dataPro.results[0].geometry.location.lat, dataPro.results[0].geometry.location.lng], 12);
                        });
                        that.displayAlert();
                    });
                });
            });
        });
        return this;
    },
    displayMail:function(){
        app.navView.displayMail(false, this.dataClient);
    },
    marker: function(map, clients, reg, callback){
        for (var i = 0; i < clients.length; i++) {
            this.createMarker(map, clients[i], reg, function(){
                callback.call(this, map);
            });
        }
    },

    displayAlert:function(){
        var that = this;
        var token = app.userProModel.attributes.token;
        this.ModelUserPro.fetchAlert(token, function(controls){
            for(item in controls){
                if(controls[item].userclient_id == that.dataClient.data.id){
                   var count = 0;
                   if(controls[item].risqueAlgue != 'green'){
                       document.getElementById('alertAlgue').classList.remove('alertAlgue');
                       count++;
                   }
                   if(controls[item].colorPictoPh != 'green'){
                       document.getElementById('alertPh').classList.remove('alert');
                       count++;
                   }
                   if(controls[item].colorPictoChlore != 'green'){
                       document.getElementById('alertChlore').classList.remove('alert');
                       count++;
                   }
                   if(count > 1){
                       $('#count').addClass('button-alert-cs').removeClass('button-mail-cs').html(count+'  nouvelles alertes');
                   }else{
                       $('#count').addClass('button-alert-cs').removeClass('button-mail-cs').html('1 nouvelle alerte');
                   }
               }else{
                    if(count == 0){
                        $('#count').addClass('button button-mail-cs').removeClass('button-mail-cs').html('aperçu de la piscine');
                    }
               }

            }
            NProgress.done();
        });
    },

    createMarker: function(map, client, reg, callback) {
        var that = this;
        var name = client.firstname + ' ' + client.lastname;
        var address = client.ownUser[0].address + ' ' + client.ownUser[0].code_postal + ' ' + client.ownUser[0].city;
        var addressReq = client.ownUser[0].address.replace(reg, '+') + ',' + client.ownUser[0].code_postal + '+' + client.ownUser[0].city + '+France';
        var currentClient =  that.dataClient.data.firstname+' '+that.dataClient.data.lastname;
        if(name == currentClient){
        that.MapBoxModel.getLocateClient(addressReq, function (data) {
            var lat = data.results[0].geometry.location.lat;
            var lng = data.results[0].geometry.location.lng;
                L.mapbox.featureLayer({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [lng, lat]
                    },
                    properties: {
                        title: name,
                        description: address,
                        'marker-size': 'large',
                        //'marker-symbol': 'marker-stroked',
                        'marker-color': '#e55a33'
                    }
                }).addTo(map);
                that.singleClientView.getWeather(lng, lat);
            });
        }else{
            that.MapBoxModel.getLocateClient(addressReq, function (data) {
                var lat = data.results[0].geometry.location.lat;
                var lng = data.results[0].geometry.location.lng;
                L.mapbox.featureLayer({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [lng, lat]
                    },
                    properties: {
                        title: name,
                        description: address,
                        'marker-size': 'large'
                        //'marker-symbol': 'marker-stroked'
                    }
                }).addTo(map);
            })}
        callback.call(this, map);
    },
    closeSingleClient:function(){

        var pageClient = document.getElementById('single-client');
        pageClient.classList.remove('fadeInUpBig');
        pageClient.classList.add('fadeOutDownBig');
        setTimeout(function(){
          pageClient.innerHTML = null;
        }, 200);   
    },

    flip:function(e){
        this.singleClientView.flip(e);
    }
});
app.SingleClientRead = Backbone.View.extend({

    template: 'singleclient',
    initialize: function(options){
        app.tools.closeView(this);
        var that = this;
        this.options = options;
        //this.ChartView = new app.ChartView({id:that.options.idClient});
        //this.singleClientView = new app.SingleClientView();
        this.ChartModel = new app.ChartModel();
        this.model = new app.UserClientModel({'token':options.token, 'id':options.id});
        this.time = "30";
        this.type = "chlore";
        this.dataClient = "";
        //this.model.fetchDataUserClient(options.token, this.time, options.id, function(){
        
        //});
        app.tools.checkAuth(function(){
            that.render();
        });
    },
    events: {
        "click .graphTime": "createGraphByTime",
        "click .graphType": "createGraphByType",
        "click .flip-card": "flip",
        "click .button-mail-cs":"displayMail",
        "click .mail-button":"displayMail"
    },
    createGraphByTime:function(e){
        this.singleClientView.createGraphByType(e);
    },
    createGraphByType:function(e){
        this.singleClientView.createGraphByType(e);
    },
    render: function(){
        var that = this;
        var token = that.model.attributes.token;
        that.ChartModel.getData(token, that.time, that.model['userclient_id'], function(dataClient){
            that.dataClient = dataClient;
            app.tools.renderTemplate(that, {data:that.dataClient.data}, true);
            //setTimeout(function(){
            //    that.ChartView.render("chlore", 30);
            //}, 100);
        });
        return this;
    },
    displayMail:function(e){
        app.navView.displayMail(false);
    }
});
app.TestView = Backbone.View.extend({

    template: 'singleclient',
    initialize: function(){
        app.tools.closeView(this);
        var that = this;
        app.tools.checkAuth(function(){
            that.render();
        });
    },
    events: {

    },
    render: function(){
        app.tools.renderTemplate(this, null, false);
        return this;
    }


});
app.UserProView = Backbone.View.extend({
    template: 'userPro',
    initialize: function(options){
      app.tools.closeView(this);
      var that = this;
      that.data = "";
      that.number = "";
      that.type = "degreeRisk";
      app.tools.checkAuth(function(){
        that.model = app.userProModel;
        that.render();
      });
      
    },
    events: {
        'click .line': 'displayClient',
        'click .eyes' : 'checkPriorities',
        'click .filtre' : 'tri'

    },

    render: function(){
      var that = this;
      this.model.fetchPriorityList(this.model.attributes.token,function(dataPriorities){
          var size = 0, key;
          for (key in dataPriorities) {
              if (dataPriorities.hasOwnProperty(key)) size++;
          }
          that.size = size;
          that.data = dataPriorities;
          app.tools.renderTemplate(that, {dataUser: that.model.toJSON(), dataPriorities: dataPriorities, size: size}, false);
          setTimeout(function(){that.tri()}, 100);
      });
      return this;
    },

    displayClient: function(e){
      var clientId =  $(e.currentTarget).data("id");
      app.singleClientProView = new app.SingleClientProView({el : $('#single-client'), idClient:clientId,  dataControls:this.data});
      var pageClient = document.getElementById('single-client');
      pageClient.classList.remove('fadeOutDownBig');
      pageClient.classList.add('fadeInUpBig');
    },

    checkPriorities: function(e){
        var client = $(e.currentTarget).data("eyes");
        var item = document.getElementById(client);
        item.classList.remove('ion-ios-eye');
        item.classList.add('ion-ios-eye-outline');
        var token = app.userProModel.attributes.token;
        this.model.checked(token, client);
    },

    tri: function (e) {
        var that = this;
        if(e != undefined){
            that.type = $(e.currentTarget).data("type");
            $('.filtre').removeClass('filtre-selected');
            document.getElementById(that.type).classList.add('filtre-selected');
        }
        var array = [];
        for(var item in that.data){
            array.push(that.data[item]);
        }
        array.sort(function(a, b){
            return b[that.type] - a[that.type];
        });
        $('.table-priorities tbody').empty();
        that.add(array);

    },

    add:function(array){
        for(var i =0; i < array.length; i++){
            this.risqueAlgue(array[i], function(data){
                var line =  $('.tr-table-priorities tr').clone();
                line.appendTo('.table-priorities tbody');
                line.children('.case').attr('data-id', array[i].userclient_id).html(i+1);
                line.children('.caseName').attr('data-id', array[i].userclient_id).html(array[i].userclient.firstname+' '+array[i].userclient.lastname);
                line.children('.volume').attr('data-id', array[i].userclient_id).html(array[i].userclient.ownSwimmingpool[0].water_volume+' m³');
                line.children('.city').attr('data-id', array[i].userclient_id).html(array[i].city);
                line.children('.icon').attr('data-id', array[i].userclient_id);
                line.children('.icon').children('.ch').attr('data-id', array[i].userclient_id).addClass(array[i].colorPictoChlore+'-indicator indicator');
                line.children('.icon').children('.al').attr('data-id', array[i].userclient_id).addClass(array[i].risqueAlgue+'-indicator indicator');
                line.children('.icon').children('.ph').attr('data-id', array[i].userclient_id).addClass(array[i].colorPictoPh+'-indicator indicator');
                if(array[i].userclient.check_problems != 1){
                    line.children('.eyes').attr('data-eyes', array[i].userclient_id).attr('id', array[i].userclient_id).addClass('ion-ios-eye');
                }else{
                    line.children('.eyes').attr('data-eyes', array[i].userclient_id).addClass('ion-ios-eye-outline');
                }
            });
        }
    },

    risqueAlgue:function(item, callback){
        if(item.risqueAlgue == "red"){
            item['algue'] = 2;
        }else if(item.risqueAlgue == "yellow"){
            item['algue'] = 1;
        }else{
            item['algue'] = 0;
        }
        callback.call(this, item);
    }
});


app.ValidationView = Backbone.View.extend({
    template: 'validation',
    initialize: function(options){
      var that = this;
      app.tools.closeView(this);
      this.model = new app.ValidationModel;
      this.model.sendValidationRequest(options.token, options.mail,function(data){
        if(data.state == 'registered') var text = 'Votre compte a bien été validé.';
        else var text = 'Request error.';
        that.render({text: text});
      });
      
    },
    render: function(params){
        app.tools.renderTemplate(this, params, true);
        return this;
    }
});